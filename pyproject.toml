[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autogen-learning"
version = "1.0.0"
description = "AutoGen Learning Project with comprehensive examples"
authors = [{name = "AutoGen Learning Team"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

# Black 代码格式化配置
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除目录
  \.git
  | \.mypy_cache
  | \.ruff_cache
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | \.pip-packages
)/
'''

# isort 导入排序配置
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [".pip-packages/*", "build/*", "dist/*"]

# Ruff 配置 (现代化的 Python linter)
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    ".pip-packages",
]

[tool.ruff.lint]
# 启用的规则集
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "S",    # bandit (security)
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "RUF",  # ruff-specific rules
]

# 忽略的规则
ignore = [
    "S101",   # assert 语句 (在示例代码中很常见)
    "S603",   # subprocess 调用 (在测试脚本中需要)
    "S607",   # 使用 shell=True (在某些情况下需要)
    "PLR0913", # 函数参数过多 (示例代码可能需要)
    "PLR2004", # 魔法数字 (示例代码中的常量)
    "TRY003",  # 异常消息过长
]

# 每个文件的最大复杂度
[tool.ruff.lint.mccabe]
max-complexity = 10

# MyPy 类型检查配置
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # 示例代码可能没有完整类型注解
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# 忽略缺失的导入
[[tool.mypy.overrides]]
module = [
    "autogen_agentchat.*",
    "autogen_core.*",
    "autogen_ext.*",
]
ignore_missing_imports = true

# Bandit 安全检查配置
[tool.bandit]
exclude_dirs = [".pip-packages", "build", "dist", ".git"]
skips = [
    "B101",  # assert_used (示例代码中常用)
    "B601",  # paramiko_calls (如果使用SSH)
]

# 安全级别设置
[tool.bandit.assert_used]
skips = ['*_test.py', 'test_*.py', 'examples/*'] 